import React,{useEffect,useMemo,useState} from 'react';import {supabase} from '../lib/supabase';import {DndContext,closestCenter} from '@dnd-kit/core';import {SortableContext,useSortable,verticalListSortingStrategy} from '@dnd-kit/sortable';import {CSS} from '@dnd-kit/utilities';const STAGES=['novo','negociacao','fechado'];export default function Deals({session}){const uid=session.user.id;const[it,si]=useState([]);const[f,sf]=useState({title:'',value:0,client_id:null});const[cs,sc]=useState([]);const ld=async()=>{const{data}=await supabase.from('deals').select('*').eq('user_id',uid).order('stage').order('position').order('created_at');si(data||[])};const lc=async()=>{const{data}=await supabase.from('clients').select('id,name').eq('user_id',uid).order('name');sc(data||[])};useEffect(()=>{ld();lc()},[]);const save=async e=>{e.preventDefault();await supabase.from('deals').insert([{...f,user_id:uid}]);sf({title:'',value:0,client_id:null});ld()};const rm=async id=>{await supabase.from('deals').delete().eq('id',id);ld()};const g=useMemo(()=>{const x={novo:[],negociacao:[],fechado:[]};for(const d of it)x[d.stage]?.push(d);return x},[it]);const end=async({active,over})=>{if(!over)return;const oid=over.id;let st=null,idx=null;if(String(oid).startsWith('deal-')){const did=String(oid).slice(5);const od=it.find(d=>d.id===did);if(od){st=od.stage;idx=g[st].findIndex(d=>d.id===did)}}else if(String(oid).startsWith('col-')){st=String(oid).slice(4);idx=g[st]?.length??0}else return;const src=it.find(d=>d.id===active.id);if(!src)return;const srcS=src.stage;const ng={...g,[srcS]:[...g[srcS]],[st]:[...g[st]]};const srcI=ng[srcS].findIndex(d=>d.id===active.id);const[m]=ng[srcS].splice(srcI,1);m.stage=st;ng[st].splice(idx,0,m);const ups=[];for(const s of STAGES){ng[s].forEach((d,i)=>{if(d.stage!==it.find(x=>x.id===d.id)?.stage||(d.position??-1)!==i){ups.push({id:d.id,stage:s,position:i})}d.stage=s;d.position=i})}si([...ng.novo,...ng.negociacao,...ng.fechado]);for(const u of ups){await supabase.from('deals').update({stage:u.stage,position:u.position}).eq('id',u.id)}ld()};return <div className='space-y-4'><div className='card card-pad'><h3 className='font-semibold mb-2'>Novo negócio</h3><form onSubmit={save} className='grid grid-cols-1 md:grid-cols-4 gap-2'><input className='input' placeholder='Título' value={f.title} onChange={e=>sf({...f,title:e.target.value})} required/><input className='input' type='number' placeholder='Valor (R$)' value={f.value} onChange={e=>sf({...f,value:Number(e.target.value)})}/><select className='input' value={f.client_id||''} onChange={e=>sf({...f,client_id:e.target.value||null})}><option value=''>Cliente</option>{cs.map(c=><option key={c.id} value={c.id}>{c.name}</option>)}</select><button className='btn-primary'>Salvar</button></form></div><DndContext collisionDetection={closestCenter} onDragEnd={end}><div className='grid grid-cols-1 md:grid-cols-3 gap-4'>{STAGES.map(s=><div key={s} className='card card-pad'><div className='font-medium capitalize mb-2'>{s}</div><SortableContext items={g[s].map(d=>d.id)} strategy={verticalListSortingStrategy}><div className='space-y-2 min-h-[100px]' id={`col-${s}`}>{g[s].map(d=><Item key={d.id} id={d.id} deal={d} onDelete={()=>rm(d.id)}/>)||null}{g[s].length===0&&<div className='text-sm'>Vazio</div>}</div></SortableContext></div>)}</div></DndContext></div>} function Item({id,deal,onDelete}){const{attributes,listeners,setNodeRef,transform,transition,isDragging}=useSortable({id});const st={transform:CSS.Transform.toString(transform),transition};return <div ref={setNodeRef} {...attributes} {...listeners} style={st} className={`border rounded-xl p-3 bg-white dark:bg-[#100c16] ${isDragging?'opacity-70 ring-1 ring-primary-400':''}`}><div className='font-semibold'>{deal.title}</div><div className='text-sm'>R$ {Number(deal.value||0).toFixed(2)}</div><div className='flex gap-2 mt-2'><button onClick={onDelete} className='text-sm text-red-500 ml-auto'>Excluir</button></div></div>}